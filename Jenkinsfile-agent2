pipeline {
    agent { label 'jenkins-agent2' }
    environment {
        ENVIRONMENT = "dev" // Set the environment dynamically if needed
    }
    stages {
        stage('Run Deployment Script') {
            steps {
                script {
                    // Execute the deployment shell script for service modules
                    sh """
                    chmod +x adventuretube-service-redeploy.sh
                    ./adventuretube-service-redeploy.sh ${ENVIRONMENT}
                    """
                }
            }
        }

        stage('Check Docker Container Health') {
            steps {
                script {
                    // List of service containers to check
                    def services = [
                        "adventuretube-microservice-auth-service-1",
                        "adventuretube-microservice-member-service-1",
                        "adventuretube-microservice-web-service-1",
                        "adventuretube-microservice-geospatial-service-1"
                    ]

                    // Check health for each container
                    services.each { service ->
                        def serviceReady = false
                        for (int i = 0; i < 10; i++) {
                            def status = sh(
                                script: "docker inspect --format='{{.State.Health.Status}}' ${service} || echo 'unhealthy'",
                                returnStdout: true
                            ).trim()

                            if (status == 'healthy') {
                                serviceReady = true
                                echo "${service} is healthy."
                                break
                            }

                            echo "${service} is not ready yet. Retrying in 5 seconds..."
                            sleep(5)
                        }

                        if (!serviceReady) {
                            error("${service} did not become ready in the expected time")
                        }
                    }
                }
            }
        }
    }
}
