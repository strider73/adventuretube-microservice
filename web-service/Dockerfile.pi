# Stage 1: Build
FROM arm64v8/openjdk:17 as builder

# Specify the JAR file location dynamically
ARG JAR_FILE=target/*.jar

# Copy the application JAR file into the build image
COPY ${JAR_FILE} application.jar

# Use Spring Boot's layertools to extract layers for optimized builds
RUN java -Djarmode=layertools -jar application.jar extract

# Stage 2: Runtime
FROM arm64v8/openjdk:17

# Install curl for health check (using a Debian-based package manager since the image is Debian-based)
RUN apt-get update && apt-get install -y --no-install-recommends curl && apt-get clean && rm -rf /var/lib/apt/lists/*

# Add a non-root user for enhanced security
RUN addgroup -S appgroup && adduser -S appuser -G appgroup
USER appuser

# Expose the application port (specific for web-service)
EXPOSE 8080 5009

# Copy the extracted layers from the builder stage
COPY --from=builder dependencies/ ./
COPY --from=builder snapshot-dependencies/ ./
COPY --from=builder spring-boot-loader/ ./
COPY --from=builder application/ ./

# Define the entry point to run the Spring Boot application
ENTRYPOINT ["java", "org.springframework.boot.loader.launch.JarLauncher"]
